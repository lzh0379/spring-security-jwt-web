buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.1.RELEASE")
        classpath("org.springframework:springloaded:1.2.0.RELEASE")
    }
}

apply plugin: "java"
apply plugin: "groovy"
apply plugin: "idea"
apply plugin: "spring-boot"

ext {
    javaVersion = "1.8"
    springSecurityOAuthVersion = "2.0.6.RELEASE"
}

repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

//configurations.all {
//    resolutionStrategy {
//        eachDependency { org.gradle.api.artifacts.DependencyResolveDetails details ->
//            if (details.requested.group == "org.springframework.security") {
//                details.useVersion "4.0.0.RC1"
//            }
//        }
//    }
//}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.security:spring-security-jwt")
    compile("org.springframework.security.oauth:spring-security-oauth2:${springSecurityOAuthVersion}")
    testCompile("com.jayway.jsonpath:json-path")
    testCompile("org.codehaus.groovy:groovy")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.springframework.security:spring-security-test")
    runtime("org.hsqldb:hsqldb")
}

compileJava {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes/main")
        testOutputDir = file("${project.buildDir}/classes/test")
        downloadJavadoc = true
        downloadSources = true
    }
    project {
        jdkName = "${javaVersion}"
        languageLevel = "${javaVersion}"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.2"
}
